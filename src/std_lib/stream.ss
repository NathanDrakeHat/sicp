(define (cons-stream a b) 
  (cons a (delay b))
)
(define stream-car 
  (lambda (s) (car s))
)
(define stream-cdr
  (lambda (s) (force (cdr s)))
)
(define (stream-ref s n)
  (if (= n 0)
      (stream-car s)
      (stream-ref (stream-cdr s) (- n 1))
  )
)
(define stream-map
  (lambda (proc . streams)
  (if (null? (car streams))
      '()
      (cons-stream
        (apply proc (map stream-car streams))
        (apply stream-map (cons proc (map stream-cdr streams)))
      )
  ))
)
(define (stream-filter filter s)
  (if (null? s)
      '()
      (if (filter (stream-car s))
          (cons-stream (stream-car s) (stream-filter filter (stream-cdr s)))
          (stream-filter filter (stream-cdr s))
      )
  )
)
(define (stream-for-each proc s)
  (if (null? s)
      (newline)
      (begin (proc (stream-car s)) (stream-for-each proc (stream-cdr s))))
)
(define (display-stream s)
  (stream-for-each display-element s)
)
(define (display-element x) 
  (display " ") 
  (display x)
)
(define (stream-range low high)
  (if (> low high)
      '()
      (cons-stream low (stream-range (+ low 1) high))
  )
)
(define a (stream-range 1 3))
; (map stream-cdr (map stream-cdr (list a a)))
(define add [lambda (a b) (+ a b)])
(display-stream (stream-map add a a))
